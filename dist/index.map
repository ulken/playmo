{"version":3,"sources":["video.js","utils/throttle.js","keyboard-shortcuts.js","utils/dom.js","vendor/vendors.js","vendor/current.js","index.js"],"names":["Video","element","tagName","Error","DEFAULT_SCRUB_SECONDS","FAST_SCRUB_SECONDS","getElement","togglePlayState","paused","play","pause","fastForward","fast","setCurrentTime","getCurrentTime","getDurationToScrub","rewind","currentTime","time","throttle","f","wait","timeoutId","args","apply","setTimeout","SCRUB_THROTTLE_MS","KeyboardShortcuts","video","keysToRegister","keyEventCodeToCommand","keyup","Space","onSpaceKeyUp","keydown","ArrowLeft","onArrowLeftKeyDown","shiftKey","ArrowRight","onArrowRightKeyDown","registerKeyListeners","Object","keys","forEach","eventName","document","addEventListener","code","codeToCommand","includes","event","preventDefault","onEvent","Promise","resolve","waitForElement","selector","querySelector","observer","MutationObserver","mutations","mutation","nodes","Array","from","addedNodes","node","matches","disconnect","observe","documentElement","childList","subtree","elementSelector","matchURL","url","test","hostname","getCurrentVendor","vendors","find","v","window","location","videoLoaded"],"mappings":"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","file":"index.map","sourceRoot":"../src","sourcesContent":["export default function Video({ element }) {\n  if (!element.tagName === \"VIDEO\") {\n    throw new Error(\"video element required\");\n  }\n\n  const DEFAULT_SCRUB_SECONDS = 10;\n  const FAST_SCRUB_SECONDS = 60;\n\n  return {\n    getElement,\n    togglePlayState,\n    fastForward,\n    rewind,\n    getCurrentTime,\n    setCurrentTime\n  };\n\n  function getElement() {\n    return element;\n  }\n\n  function togglePlayState() {\n    if (element.paused) {\n      element.play();\n    } else {\n      element.pause();\n    }\n  }\n\n  function fastForward({ fast }) {\n    const newTime = getCurrentTime() + getDurationToScrub({ fast });\n    setCurrentTime(newTime);\n  }\n\n  function rewind({ fast }) {\n    const newTime = getCurrentTime() - getDurationToScrub({ fast });\n    setCurrentTime(newTime);\n  }\n\n  function getCurrentTime() {\n    return element.currentTime;\n  }\n\n  function setCurrentTime(time) {\n    element.currentTime = time;\n  }\n\n  function getDurationToScrub({ fast }) {\n    return fast ? FAST_SCRUB_SECONDS : DEFAULT_SCRUB_SECONDS;\n  }\n}\n","export default function throttle(f, wait) {\n  let timeoutId = null;\n  return (...args) => {\n    if (timeoutId) return;\n\n    f.apply(this, args);\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n    }, wait);\n  };\n}\n","import throttle from \"./utils/throttle\";\n\n// Prevent flooding (UI can't keep up anyway)\nconst SCRUB_THROTTLE_MS = 100;\n\nexport default function KeyboardShortcuts({ video, keysToRegister }) {\n  const keyEventCodeToCommand = {\n    keyup: {\n      Space: onSpaceKeyUp\n    },\n    keydown: {\n      ArrowLeft: throttle(onArrowLeftKeyDown, SCRUB_THROTTLE_MS),\n      ArrowRight: throttle(onArrowRightKeyDown, SCRUB_THROTTLE_MS)\n    }\n  };\n\n  return {\n    registerKeyListeners\n  };\n\n  function registerKeyListeners() {\n    Object.keys(keyEventCodeToCommand).forEach(eventName => {\n      document.addEventListener(eventName, ({ code }) => {\n        const codeToCommand = keyEventCodeToCommand[eventName];\n        if (keysToRegister.includes(code) && code in codeToCommand) {\n          event.preventDefault();\n          codeToCommand[code](event);\n        }\n      });\n    });\n  }\n\n  function onSpaceKeyUp() {\n    video.togglePlayState();\n  }\n\n  function onArrowLeftKeyDown({ shiftKey }) {\n    video.rewind({ fast: shiftKey });\n  }\n\n  function onArrowRightKeyDown({ shiftKey }) {\n    video.fastForward({ fast: shiftKey });\n  }\n}\n","export { onEvent, waitForElement };\n\nfunction onEvent(element, eventName) {\n  return new Promise(resolve => {\n    element.addEventListener(eventName, resolve);\n  });\n}\n\nfunction waitForElement(selector) {\n  return new Promise(resolve => {\n    const element = document.querySelector(selector);\n    if (element) {\n      resolve(element);\n      return;\n    }\n\n    const observer = new MutationObserver(mutations => {\n      mutations.forEach(mutation => {\n        const nodes = Array.from(mutation.addedNodes);\n        for (const node of nodes) {\n          if (node.matches && node.matches(selector)) {\n            observer.disconnect();\n            resolve(node);\n          }\n        }\n      });\n    });\n    observer.observe(document.documentElement, {\n      childList: true,\n      subtree: true\n    });\n  });\n}\n","export default [\n  {\n    elementSelector: \"#vjs_video_1_Clpp_html5_mse_api\",\n    keysToRegister: [\"Space\", \"ArrowLeft\", \"ArrowRight\"],\n    matchURL: url => /^.*\\.hbonordic\\.com$/.test(url.hostname)\n  },\n  {\n    elementSelector: \"#player\",\n    keysToRegister: [\"ArrowLeft\", \"ArrowRight\"],\n    matchURL: url => /^.*\\.dplay\\..*$/.test(url.hostname)\n  }\n];\n","import vendors from \"./vendors\";\n\nexport default function getCurrentVendor() {\n  return vendors.find(v => v.matchURL(window.location));\n}\n","import VideoController from \"./video\";\nimport KeyboardShortcuts from \"./keyboard-shortcuts\";\nimport { onEvent, waitForElement } from \"./utils/dom\";\nimport getCurrentVendor from \"./vendor/current\";\n\n(async function main() {\n  const { elementSelector, keysToRegister } = getCurrentVendor();\n  const element = await videoLoaded(elementSelector);\n  const video = VideoController({ element });\n  const keyboardShortcuts = KeyboardShortcuts({ video, keysToRegister });\n  keyboardShortcuts.registerKeyListeners();\n})();\n\nasync function videoLoaded(selector) {\n  const video = await waitForElement(selector);\n  await onEvent(video, \"loadedmetadata\");\n  return video;\n}\n"]}
{"version":3,"sources":["utils/live-reload.js","background.js"],"names":["LiveReload","flatten","arr","reduce","acc","e","concat","Array","isArray","sum","xs","x","filesInDirectory","dir","Promise","resolve","createReader","readEntries","files","all","entries","filter","name","startsWith","map","isDirectory","file","modifiedTimeForFilesInDirectory","f","lastModified","reload","chrome","tabs","query","active","currentWindow","activeTab","id","runtime","watchForChanges","lastModifiedTime","modifiedTime","setTimeout","watch","management","getSelf","self","installType","getPackageDirectoryEntry"],"mappings":";AAuDeA,aAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAvDf,MAAMC,EAAUC,GACdA,EAAIC,OAAO,CAACC,EAAKC,IAAMD,EAAIE,OAAOC,MAAMC,QAAQH,GAAKJ,EAAQI,GAAKA,GAAI,IAElEI,EAAMC,GAAMA,EAAGP,OAAO,CAACC,EAAKO,IAAMP,EAAMO,EAAG,GAE3CC,EAAmBC,GACvB,IAAIC,QAAQC,GACVF,EAAIG,eAAeC,YAAY,MAAA,IACvBC,MAAAA,QAAcJ,QAAQK,IAC1BC,EACGC,OAAOhB,IAAMA,EAAEiB,KAAKC,WAAW,MAC/BC,IAAInB,GACHA,EAAEoB,YACEb,EAAiBP,GACjB,IAAIS,QAAQC,GAAWV,EAAEqB,KAAKX,MAGjCA,OAAAA,EAAQd,EAAQiB,OAIvBS,EAAkC,MAAA,IAChCT,MAAAA,QAAcN,EAAiBC,GAC9BJ,OAAAA,EAAIS,EAAMM,IAAII,GAAKA,EAAEC,gBAGxBC,EAAS,KACbC,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,GAAQ,EAAEC,MACrDA,GACFL,OAAOC,KAAKF,OAAOM,EAAUC,IAG/BN,OAAOO,QAAQR,YAIbS,EAAkB,MAAO1B,EAAK2B,KAC5BC,MAAAA,QAAqBd,EAAgCd,GACxC2B,GAAoBA,IAAqBC,EAX5DV,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,GAAQ,EAAEC,MACrDA,GACFL,OAAOC,KAAKF,OAAOM,EAAUC,IAG/BN,OAAOO,QAAQR,WAUfY,WAAW,IAAMH,EAAgB1B,EAAK4B,GAAe,MAInDE,EAAQ,IACZZ,OAAOa,WAAWC,QAAQC,IACC,gBAArBA,EAAKC,aACPhB,OAAOO,QAAQU,yBAAyBT,KAIxCvC,EAAa,CAAE2C,MAAAA,GAEN3C,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;ACrDf,aAFA,IAAA,EAAA,EAAA,QAAA,wBAEA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GAAAA,EAAW2C,QAAAA","file":"background.map","sourceRoot":"../src","sourcesContent":["const flatten = arr =>\n  arr.reduce((acc, e) => acc.concat(Array.isArray(e) ? flatten(e) : e), []);\n\nconst sum = xs => xs.reduce((acc, x) => acc + x, 0);\n\nconst filesInDirectory = dir =>\n  new Promise(resolve =>\n    dir.createReader().readEntries(async entries => {\n      const files = await Promise.all(\n        entries\n          .filter(e => !e.name.startsWith(\".\"))\n          .map(e =>\n            e.isDirectory\n              ? filesInDirectory(e)\n              : new Promise(resolve => e.file(resolve))\n          )\n      );\n      return resolve(flatten(files));\n    })\n  );\n\nconst modifiedTimeForFilesInDirectory = async dir => {\n  const files = await filesInDirectory(dir);\n  return sum(files.map(f => f.lastModified));\n};\n\nconst reload = () => {\n  chrome.tabs.query({ active: true, currentWindow: true }, ([activeTab]) => {\n    if (activeTab) {\n      chrome.tabs.reload(activeTab.id);\n    }\n\n    chrome.runtime.reload();\n  });\n};\n\nconst watchForChanges = async (dir, lastModifiedTime) => {\n  const modifiedTime = await modifiedTimeForFilesInDirectory(dir);\n  const hasChanged = lastModifiedTime && lastModifiedTime !== modifiedTime;\n  if (hasChanged) {\n    reload();\n  } else {\n    setTimeout(() => watchForChanges(dir, modifiedTime), 100);\n  }\n};\n\nconst watch = () =>\n  chrome.management.getSelf(self => {\n    if (self.installType === \"development\") {\n      chrome.runtime.getPackageDirectoryEntry(watchForChanges);\n    }\n  });\n\nconst LiveReload = { watch };\n\nexport default LiveReload;\n","import LiveReload from \"./utils/live-reload\";\n\nLiveReload.watch();\n"]}